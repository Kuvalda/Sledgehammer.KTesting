using System.Collections.Generic;
using System.Linq;

namespace Sledgehammer.KTesting
{
    /// <summary>
    /// Реализация поиск пар.
    /// 
    /// Требования к реализации:
    /// 1. Есть коллекция чисел и отдельное число Х.
    /// 2. Надо вывести все пары чисел, которые в сумме равны заданному Х.
    /// 3. Числа целые и пары только уникальные.
    /// 4. Насчет положительных или любых, решать вам
    /// </summary>
    public sealed class PairSearch
    {
        public IEnumerable<ulong> Items { get; set; }

        public IEnumerable<ulong> SearchFor(ulong X)
        {
            if (null == Items || 0 == Items.Count()) return null;

            /*
                В случае использования отрицательных чисел интересующий нас набор ничем не ограничен,
                так как любому положительному числу может существовать отрицательная пара меньшая на Х.

                В случае только положительных чисел набор ограничениями значениями [0..Х],
                так как не одно слагаемое не может быть больще Х.
            */

            /*
                values - это одновременно и ограниченная нами выборка
                и двоичный индекс для последующей фильтрации, так как исходный набор может быть медленным
            */
            HashSet<ulong> values = new HashSet<ulong>(
                Items
                .Where((value) => (value <= X))
                .Distinct() /* если мы уверены, что в исходном наборе нет повторяющихся элементов, для ускорения эту строку следует опустить. */
            );

            /*
                Так как мы не различаем порядок слагаемых,
                Интересующий нас набор значений для перебора в диапазоне [0..Х/2].
            */
            ulong lim = X / 2;

            /*
                Не будем использовать методы-запросы или linq, напрямую оно будет проще и быстрее.
                Так как при перечислении нельзя модифицировать коллекцию, то вместо улдаления ненужного в старой коллекции
                соберем нужное в новой:
            */
            HashSet<ulong> res = new HashSet<ulong>();
            foreach (ulong i in values)
            {
                if (i > lim) continue;

                if (values.Contains(X - i))
                {
                    res.Add(i);
                }
            }

            return res
                .OrderBy(v => v) /* так просто для удобства и красоты результата */
                .ToArray();
        }
    }
}
